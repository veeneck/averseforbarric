{"Protocols.html#/s:7PathKit15PKAtlasProtocolP":{"name":"PKAtlasProtocol","abstract":"<p>Allows for callbacks to modify the navmesh with game specific data. Example: apply a custom physcis collider to an obstacle. This allows the navmesh to still work with zero game knoweldge"},"Classes/PKNavmesh.html#/s:7PathKit9PKNavmeshC04findA0So6GKPathC4path_SaySo13GKGraphNode2DCG5nodesSf0F4SizetSgSC7CGPointV_AO3endSaySo17GKPolygonObstacleCG17ignoringObstaclesSf6radiusSo7SKSceneC5sceneSf4sizetF":{"name":"findPath(_:end:ignoringObstacles:radius:scene:size:)","abstract":"<p>Add a start and end node to the graph. Find the path. Remove the start and end node. Trickery needed with buffer radius issues.","parent_name":"PKNavmesh"},"Classes/PKNavmesh.html#/s:7PathKit9PKNavmeshC12pointIsValidSb4simd6float2VF":{"name":"pointIsValid(_:)","abstract":"<p>Determines if a point lies on an obstacle. If this doesn&rsquo;t perform well, we can loop through the MeshObstacles and call","parent_name":"PKNavmesh"},"Classes/PKAtlas.html#/s:7PathKit7PKAtlasC6addMapySf12bufferRadius_tF":{"name":"addMap(bufferRadius:)","abstract":"<p>After initialization, the user of this class is expected to call this function and add various maps depending on how many buffer sizes they need.</p>","parent_name":"PKAtlas"},"Classes/PKAtlas.html#/s:7PathKit7PKAtlasC04findA0So6GKPathC4path_SaySo13GKGraphNode2DCG5nodesSf0F4SizetSgSC7CGPointV5start_AO3endSf10unitRadiusSf0fO0tF":{"name":"findPath(start:end:unitRadius:pathRadius:)","abstract":"<p>Find path on appropriate map.</p>","parent_name":"PKAtlas"},"Classes/PKAtlas.html#/s:7PathKit7PKAtlasC12pointIsValidSb4simd6float2VF":{"name":"pointIsValid(_:)","abstract":"<p>Because all maps contain the same obstacle graph, we can check against any map to see if the point is valid","parent_name":"PKAtlas"},"Classes/PKAtlas.html":{"name":"PKAtlas","abstract":"<p>A collection of navmeshes. Could further be expendanded to handle qudrants, different terrain types, and so on. Goal is to be main entry point for pathfinding requests.</p>"},"Classes.html#/s:7PathKit12PKDepthGraphC":{"name":"PKDepthGraph","abstract":"<p>Main collection of depth objects for a level. Consists of regions (large, fast to check squares) which each have objects (detailed CGPath) inside of them"},"Classes/PKNavmesh.html":{"name":"PKNavmesh","abstract":"<p>Extension of GKMeshGraph that has built in utility methods for pathfinding. For example, if the desired point is inside of an obstacle, you can optionally find the"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"},"Protocols.html":{"name":"Protocols","abstract":"<p>The following protocols are available globally.</p>"}}