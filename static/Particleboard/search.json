{"Functions.html#/s:13Particleboard20shortestAngleBetweenS2f6angle1_Sf6angle2tF":{"name":"shortestAngleBetween(angle1:angle2:)","abstract":"<p>Returns the shortest angle between two angles. The result is always between"},"Functions.html#/s:13Particleboard14positiveRadianS2f5angle_tF":{"name":"positiveRadian(angle:)","abstract":"<p>Return the postivie value of a negative radian</p>"},"Functions.html#/s:13Particleboard1poiSC7CGPointVAD_ADtF":{"name":"+(_:_:)","abstract":"<p>Adds two CGPoint values and returns the result as a new CGPoint.</p>"},"Functions.html#/s:13Particleboard2peoiySC7CGPointVz_ADtF":{"name":"+=(_:_:)","abstract":"<p>Increments a CGPoint with the value of another.</p>"},"Functions.html#/s:13Particleboard1poiSC7CGPointVAD_4simd6float2VtF":{"name":"+(_:_:)","abstract":"<p>Adds a CGVector to this CGPoint and returns the result as a new CGPoint.</p>"},"Functions.html#/s:13Particleboard2peoiySC7CGPointVz_4simd6float2VtF":{"name":"+=(_:_:)","abstract":"<p>Increments a CGPoint with the value of a CGVector.</p>"},"Functions.html#/s:13Particleboard1soiSC7CGPointVAD_ADtF":{"name":"-(_:_:)","abstract":"<p>Subtracts two CGPoint values and returns the result as a new CGPoint.</p>"},"Functions.html#/s:13Particleboard2seoiySC7CGPointVz_ADtF":{"name":"-=(_:_:)","abstract":"<p>Decrements a CGPoint with the value of another.</p>"},"Functions.html#/s:13Particleboard1soiSC7CGPointVAD_SC8CGVectorVtF":{"name":"-(_:_:)","abstract":"<p>Subtracts a CGVector from a CGPoint and returns the result as a new CGPoint.</p>"},"Functions.html#/s:13Particleboard2seoiySC7CGPointVz_SC8CGVectorVtF":{"name":"-=(_:_:)","abstract":"<p>Decrements a CGPoint with the value of a CGVector.</p>"},"Functions.html#/s:13Particleboard1moiSC7CGPointVAD_ADtF":{"name":"*(_:_:)","abstract":"<p>Multiplies two CGPoint values and returns the result as a new CGPoint.</p>"},"Functions.html#/s:13Particleboard2meoiySC7CGPointVz_ADtF":{"name":"*=(_:_:)","abstract":"<p>Multiplies a CGPoint with another.</p>"},"Functions.html#/s:13Particleboard1moiSC7CGPointVAD_12CoreGraphics7CGFloatVtF":{"name":"*(_:_:)","abstract":"<p>Multiplies the x and y fields of a CGPoint with the same scalar value and"},"Functions.html#/s:13Particleboard2meoiySC7CGPointVz_12CoreGraphics7CGFloatVtF":{"name":"*=(_:_:)","abstract":"<p>Multiplies the x and y fields of a CGPoint with the same scalar value.</p>"},"Functions.html#/s:13Particleboard1moiSC7CGPointVAD_SC8CGVectorVtF":{"name":"*(_:_:)","abstract":"<p>Multiplies a CGPoint with a CGVector and returns the result as a new CGPoint.</p>"},"Functions.html#/s:13Particleboard2meoiySC7CGPointVz_SC8CGVectorVtF":{"name":"*=(_:_:)","abstract":"<p>Multiplies a CGPoint with a CGVector.</p>"},"Functions.html#/s:13Particleboard1doiSC7CGPointVAD_ADtF":{"name":"/(_:_:)","abstract":"<p>Divides two CGPoint values and returns the result as a new CGPoint.</p>"},"Functions.html#/s:13Particleboard2deoiySC7CGPointVz_ADtF":{"name":"/=(_:_:)","abstract":"<p>Divides a CGPoint by another.</p>"},"Functions.html#/s:13Particleboard1doiSC7CGPointVAD_12CoreGraphics7CGFloatVtF":{"name":"/(_:_:)","abstract":"<p>Divides the x and y fields of a CGPoint by the same scalar value and returns"},"Functions.html#/s:13Particleboard2deoiySC7CGPointVz_12CoreGraphics7CGFloatVtF":{"name":"/=(_:_:)","abstract":"<p>Divides the x and y fields of a CGPoint by the same scalar value.</p>"},"Functions.html#/s:13Particleboard1doiSC7CGPointVAD_SC8CGVectorVtF":{"name":"/(_:_:)","abstract":"<p>Divides a CGPoint by a CGVector and returns the result as a new CGPoint.</p>"},"Functions.html#/s:13Particleboard2deoiySC7CGPointVz_SC8CGVectorVtF":{"name":"/=(_:_:)","abstract":"<p>Divides a CGPoint by a CGVector.</p>"},"Functions.html#/s:13Particleboard4lerpSC7CGPointVAD5start_AD3end12CoreGraphics7CGFloatV1ttF":{"name":"lerp(start:end:t:)","abstract":"<p>Performs a linear interpolation between two CGPoint values.</p>"},"Functions.html#/s:13Particleboard1poiSC8CGVectorVAD_ADtF":{"name":"+(_:_:)","abstract":"<p>Adds two CGVector values and returns the result as a new CGVector.</p>"},"Functions.html#/s:13Particleboard2peoiySC8CGVectorVz_ADtF":{"name":"+=(_:_:)","abstract":"<p>Increments a CGVector with the value of another.</p>"},"Functions.html#/s:13Particleboard1soiSC8CGVectorVAD_ADtF":{"name":"-(_:_:)","abstract":"<p>Subtracts two CGVector values and returns the result as a new CGVector.</p>"},"Functions.html#/s:13Particleboard2seoiySC8CGVectorVz_ADtF":{"name":"-=(_:_:)","abstract":"<p>Decrements a CGVector with the value of another.</p>"},"Functions.html#/s:13Particleboard1moiSC8CGVectorVAD_ADtF":{"name":"*(_:_:)","abstract":"<p>Multiplies two CGVector values and returns the result as a new CGVector.</p>"},"Functions.html#/s:13Particleboard2meoiySC8CGVectorVz_ADtF":{"name":"*=(_:_:)","abstract":"<p>Multiplies a CGVector with another.</p>"},"Functions.html#/s:13Particleboard1moiSC8CGVectorVAD_12CoreGraphics7CGFloatVtF":{"name":"*(_:_:)","abstract":"<p>Multiplies the x and y fields of a CGVector with the same scalar value and"},"Functions.html#/s:13Particleboard2meoiySC8CGVectorVz_12CoreGraphics7CGFloatVtF":{"name":"*=(_:_:)","abstract":"<p>Multiplies the x and y fields of a CGVector with the same scalar value.</p>"},"Functions.html#/s:13Particleboard1doiSC8CGVectorVAD_ADtF":{"name":"/(_:_:)","abstract":"<p>Divides two CGVector values and returns the result as a new CGVector.</p>"},"Functions.html#/s:13Particleboard2deoiySC8CGVectorVz_ADtF":{"name":"/=(_:_:)","abstract":"<p>Divides a CGVector by another.</p>"},"Functions.html#/s:13Particleboard1doiSC8CGVectorVAD_12CoreGraphics7CGFloatVtF":{"name":"/(_:_:)","abstract":"<p>Divides the dx and dy fields of a CGVector by the same scalar value and"},"Functions.html#/s:13Particleboard2deoiySC8CGVectorVz_12CoreGraphics7CGFloatVtF":{"name":"/=(_:_:)","abstract":"<p>Divides the dx and dy fields of a CGVector by the same scalar value.</p>"},"Functions.html#/s:13Particleboard4lerpSC8CGVectorVAD5start_AD3end12CoreGraphics7CGFloatV1ttF":{"name":"lerp(start:end:t:)","abstract":"<p>Performs a linear interpolation between two CGVector values.</p>"},"Extensions/float2.html#/s:4simd6float2V13ParticleboardEACSC7CGPointVcfc":{"name":"init(_:)","abstract":"<p>Initialize with a <code>CGPoint</code> type.</p>","parent_name":"float2"},"Extensions/float2.html#/s:4simd6float2V13ParticleboardEACSi2dx_Si2dytcfc":{"name":"init(dx:dy:)","abstract":"<p>Initialize with a <code>Int</code> type.</p>","parent_name":"float2"},"Extensions/float2.html#/s:4simd6float2V13ParticleboardE5angleSfvp":{"name":"angle","abstract":"<p>Returns the angle in radians of the vector described by the CGVector.","parent_name":"float2"},"Extensions/float2.html#/s:4simd6float2V13ParticleboardE18angleBetweenPointsSfAC3end_tF":{"name":"angleBetweenPoints(end:)","abstract":"<p>Returns the angle between two points in radians</p>","parent_name":"float2"},"Extensions/SKCameraNode.html#/c:@CM@Particleboard@@objc(cs)SKCameraNode(im)panToPointWithPoint:duration:":{"name":"panToPoint(point:duration:)","abstract":"<p>Use this to move camera around manually.</p>","parent_name":"SKCameraNode"},"Extensions/Int.html#/s:Si13ParticleboardE7clampedSis5RangeVySiG5range_tF":{"name":"clamped(range:)","abstract":"<p>Ensures that the integer value stays with the specified range.</p>","parent_name":"Int"},"Extensions/Int.html#/s:Si13ParticleboardE5clampSis5RangeVySiG5range_tF":{"name":"clamp(range:)","abstract":"<p>Ensures that the integer value stays with the specified range.</p>","parent_name":"Int"},"Extensions/Int.html#/s:Si13ParticleboardE7clampedS2i2v1_SitF":{"name":"clamped(v1:_:)","abstract":"<p>Ensures that the integer value stays between the given values, inclusive.</p>","parent_name":"Int"},"Extensions/Int.html#/s:Si13ParticleboardE5clampS2i2v1_SitF":{"name":"clamp(v1:_:)","abstract":"<p>Ensures that the integer value stays between the given values, inclusive.</p>","parent_name":"Int"},"Extensions/Int.html#/s:Si13ParticleboardE6randomSis5RangeVySiG5range_tFZ":{"name":"random(range:)","abstract":"<p>Returns a random integer in the specified range.</p>","parent_name":"Int"},"Extensions/Int.html#/s:Si13ParticleboardE6randomS2i1n_tFZ":{"name":"random(n:)","abstract":"<p>Returns a random integer between 0 and n-1.</p>","parent_name":"Int"},"Extensions/Int.html#/s:Si13ParticleboardE6randomS2i3min_Si3maxtFZ":{"name":"random(min:max:)","abstract":"<p>Returns a random integer in the range min&hellip;max, inclusive.</p>","parent_name":"Int"},"Extensions/Int.html#/s:Si13ParticleboardE6randomS2iFZ":{"name":"random(_:)","abstract":"<p>Returns a random integer between 0 and n-1.</p>","parent_name":"Int"},"Extensions/CGVector.html#/s:SC8CGVectorV13ParticleboardEABSC7CGPointV5point_tcfc":{"name":"init(point:)","abstract":"<p>Creates a new CGVector given a CGPoint.</p>","parent_name":"CGVector"},"Extensions/CGVector.html#/s:SC8CGVectorV13ParticleboardEABSC7CGPointV5start_AE3endtcfc":{"name":"init(start:end:)","abstract":"<p>Creates a vector given two points</p>","parent_name":"CGVector"},"Extensions/CGVector.html#/s:SC8CGVectorV13ParticleboardEAB12CoreGraphics7CGFloatV5angle_tcfc":{"name":"init(angle:)","abstract":"<p>Given an angle in radians, creates a vector of length 1.0 and returns the","parent_name":"CGVector"},"Extensions/CGVector.html#/s:SC8CGVectorV13ParticleboardE6offsetAB12CoreGraphics7CGFloatV2dx_AG2dytF":{"name":"offset(dx:dy:)","abstract":"<p>Adds (dx, dy) to the vector.</p>","parent_name":"CGVector"},"Extensions/CGVector.html#/s:SC8CGVectorV13ParticleboardE6length12CoreGraphics7CGFloatVyF":{"name":"length()","abstract":"<p>Returns the length (magnitude) of the vector described by the CGVector.</p>","parent_name":"CGVector"},"Extensions/CGVector.html#/s:SC8CGVectorV13ParticleboardE13lengthSquared12CoreGraphics7CGFloatVyF":{"name":"lengthSquared()","abstract":"<p>Returns the squared length of the vector described by the CGVector.</p>","parent_name":"CGVector"},"Extensions/CGVector.html#/s:SC8CGVectorV13ParticleboardE5limitAB12CoreGraphics7CGFloatV6scalar_tF":{"name":"limit(scalar:)","abstract":"<p>Limits the vector.</p>","parent_name":"CGVector"},"Extensions/CGVector.html#/s:SC8CGVectorV13ParticleboardE10normalizedAByF":{"name":"normalized()","parent_name":"CGVector"},"Extensions/CGVector.html#/s:SC8CGVectorV13ParticleboardE9normalizeAByF":{"name":"normalize()","abstract":"<p>Normalizes the vector described by the CGVector to length 1.0.</p>","parent_name":"CGVector"},"Extensions/CGVector.html#/s:SC8CGVectorV13ParticleboardE10distanceTo12CoreGraphics7CGFloatVAB6vector_tF":{"name":"distanceTo(vector:)","abstract":"<p>Calculates the distance between two CGVectors. Pythagoras!</p>","parent_name":"CGVector"},"Extensions/CGVector.html#/s:SC8CGVectorV13ParticleboardE5angle12CoreGraphics7CGFloatVvp":{"name":"angle","abstract":"<p>Returns the angle in radians of the vector described by the CGVector.","parent_name":"CGVector"},"Extensions/CGRect.html#/s:SC6CGRectV13ParticleboardE28lineFromCenterIntersectsSideSC7CGPointV12intersection_AC0aG0O4sidetAF8endPoint_tF":{"name":"lineFromCenterIntersectsSide(endPoint:)","abstract":"<p>Given a point outside of the rectangle, this will find out where that point would intersect the recentangles edge","parent_name":"CGRect"},"Extensions/CGRect.html#/s:SC6CGRectV13ParticleboardE15pointsIntersectSC7CGPointVAF2a1_AF2a2AF2b1AF2b2tF":{"name":"pointsIntersect(a1:a2:b1:b2:)","abstract":"<p>Determines the point of intersection between any two lines</p>","parent_name":"CGRect"},"Extensions/CGPoint.html#/s:SC7CGPointV13ParticleboardEABSC8CGVectorV6vector_tcfc":{"name":"init(vector:)","abstract":"<p>Creates a new CGPoint given a CGVector.</p>","parent_name":"CGPoint"},"Extensions/CGPoint.html#/s:SC7CGPointV13ParticleboardEAB12CoreGraphics7CGFloatV5angle_tcfc":{"name":"init(angle:)","abstract":"<p>Given an angle in radians, creates a vector of length 1.0 and returns the","parent_name":"CGPoint"},"Extensions/CGPoint.html#/s:SC7CGPointV13ParticleboardEAB4simd6float2Vcfc":{"name":"init(_:)","abstract":"<p>Initialize with a <code>float2</code> type.</p>","parent_name":"CGPoint"},"Extensions/CGPoint.html#/s:SC7CGPointV13ParticleboardE6offsetAB12CoreGraphics7CGFloatV2dx_AG2dytF":{"name":"offset(dx:dy:)","abstract":"<p>Adds (dx, dy) to the point.</p>","parent_name":"CGPoint"},"Extensions/CGPoint.html#/s:SC7CGPointV13ParticleboardE6length12CoreGraphics7CGFloatVyF":{"name":"length()","abstract":"<p>Returns the length (magnitude) of the vector described by the CGPoint.</p>","parent_name":"CGPoint"},"Extensions/CGPoint.html#/s:SC7CGPointV13ParticleboardE13lengthSquared12CoreGraphics7CGFloatVyF":{"name":"lengthSquared()","abstract":"<p>Returns the squared length of the vector described by the CGPoint.</p>","parent_name":"CGPoint"},"Extensions/CGPoint.html#/s:SC7CGPointV13ParticleboardE10normalizedAByF":{"name":"normalized()","abstract":"<p>Normalizes the vector described by the CGPoint to length 1.0 and returns","parent_name":"CGPoint"},"Extensions/CGPoint.html#/s:SC7CGPointV13ParticleboardE9normalizeAByF":{"name":"normalize()","abstract":"<p>Normalizes the vector described by the CGPoint to length 1.0.</p>","parent_name":"CGPoint"},"Extensions/CGPoint.html#/s:SC7CGPointV13ParticleboardE10distanceTo12CoreGraphics7CGFloatVAB5point_tF":{"name":"distanceTo(point:)","abstract":"<p>Calculates the distance between two CGPoints. Pythagoras!</p>","parent_name":"CGPoint"},"Extensions/CGPoint.html#/s:SC7CGPointV13ParticleboardE17distanceToSquared12CoreGraphics7CGFloatVAB5point_tF":{"name":"distanceToSquared(point:)","abstract":"<p>Calculates the distance between two CGPoints without square rooting them. Pythagoras!</p>","parent_name":"CGPoint"},"Extensions/CGPoint.html#/s:SC7CGPointV13ParticleboardE5angle12CoreGraphics7CGFloatVvp":{"name":"angle","abstract":"<p>Returns the angle in radians of the vector described by the CGPoint.","parent_name":"CGPoint"},"Extensions/CGPath.html#/s:So6CGPathC13ParticleboardE13coneFromPointSo13CGMutablePathCSC7CGPointV5start_Sf5range12CoreGraphics7CGFloatV7headingAM8halfTurntFZ":{"name":"coneFromPoint(start:range:heading:halfTurn:)","abstract":"<p>Takes a starting point, and then draws a line +/- halfWidth radians from the heading.","parent_name":"CGPath"},"Extensions/CGFloat.html#/s:12CoreGraphics7CGFloatV13ParticleboardE16degreesToRadiansACyF":{"name":"degreesToRadians()","abstract":"<p>Converts an angle in degrees to radians.</p>","parent_name":"CGFloat"},"Extensions/CGFloat.html#/s:12CoreGraphics7CGFloatV13ParticleboardE16radiansToDegreesACyF":{"name":"radiansToDegrees()","abstract":"<p>Converts an angle in radians to degrees.</p>","parent_name":"CGFloat"},"Extensions/CGFloat.html#/s:12CoreGraphics7CGFloatV13ParticleboardE7clampedA2C2v1_ACtF":{"name":"clamped(v1:_:)","abstract":"<p>Ensures that the float value stays between the given values, inclusive.</p>","parent_name":"CGFloat"},"Extensions/CGFloat.html#/s:12CoreGraphics7CGFloatV13ParticleboardE5clampA2C2v1_ACtF":{"name":"clamp(v1:_:)","abstract":"<p>Ensures that the float value stays between the given values, inclusive.</p>","parent_name":"CGFloat"},"Extensions/CGFloat.html#/s:12CoreGraphics7CGFloatV13ParticleboardE4signACyF":{"name":"sign()","abstract":"<p>Returns 1.0 if a floating point value is positive; -1.0 if it is negative.</p>","parent_name":"CGFloat"},"Extensions/CGFloat.html#/s:12CoreGraphics7CGFloatV13ParticleboardE6randomACyFZ":{"name":"random()","abstract":"<p>Returns a random floating point number between 0.0 and 1.0, inclusive.</p>","parent_name":"CGFloat"},"Extensions/CGFloat.html#/s:12CoreGraphics7CGFloatV13ParticleboardE6randomACSi3min_Si3maxAC7divisortFZ":{"name":"random(min:max:divisor:)","abstract":"<p>Returns a random floating point number in the range min&hellip;max, inclusive.</p>","parent_name":"CGFloat"},"Extensions/CGFloat.html#/s:12CoreGraphics7CGFloatV13ParticleboardE10randomSignACyFZ":{"name":"randomSign()","abstract":"<p>Randomly returns either 1.0 or -1.0.</p>","parent_name":"CGFloat"},"Extensions/CGFloat.html":{"name":"CGFloat"},"Extensions/CGPath.html":{"name":"CGPath"},"Extensions/CGPoint.html":{"name":"CGPoint"},"Extensions/CGRect.html":{"name":"CGRect","abstract":"<p>Additional geometry functions to make CGRect more powerful.</p>"},"Extensions/CGVector.html":{"name":"CGVector"},"Extensions/Int.html":{"name":"Int"},"Extensions/SKCameraNode.html":{"name":"SKCameraNode"},"Extensions/float2.html":{"name":"float2"},"Enums.html#/s:13Particleboard10CGRectSideO":{"name":"CGRectSide","abstract":"<p>Useful, clean representation of the sides of a rectangle. Specifically used to determine which side a line intersects"},"Enums.html#/s:13Particleboard11CodePackageO":{"name":"CodePackage","abstract":"<p>Disabled just means .Debug &amp; .Info won&rsquo;t show</p>"},"Global Variables.html#/s:13Particleboard003BxaSfvp":{"name":"π","abstract":"<p>The value of π as a CGFloat</p>"},"Classes/PBSound/SoundGrouping.html#/s:13Particleboard7PBSoundC13SoundGroupingVAESS8filename_SS8fileTypeSS0F6PrefixSi5countSi9frequencySf14volumeModifiertcfc":{"name":"init(filename:fileType:filePrefix:count:frequency:volumeModifier:)","abstract":"<p>public var currentlyPlaying : Int = 0</p>","parent_name":"SoundGrouping"},"Classes/PBSound.html#/c:@M@Particleboard@objc(cs)PBSound(py)volume":{"name":"volume","abstract":"<p>AVPlayer expects a volume of 0 to 1. Making this an Int just abstracts it to something easier to read. If you set it to 6, 0.6 would be passed to AVPlayer.</p>","parent_name":"PBSound"},"Classes/PBSound/SoundGrouping.html":{"name":"SoundGrouping","abstract":"<p>A data structure to hold douns groupings. Groupings allow a file with different variations to be randomly played. Can also adjust frequency so that sometimes nothing is played. Conveniently provides the utility that would allow a bow to make different sounds when firing, or a unit to <strong>sometimes</strong> say something when selected.</p>","parent_name":"PBSound"},"Classes/PBSound.html#/s:13Particleboard7PBSoundC11soundGroupss10DictionaryVySSAC13SoundGroupingVGvp":{"name":"soundGroups","abstract":"<pre class=\"highlight swift\"><code>   <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">currentlyPlaying</span> <span class=\"o\">+=</span> <span class=\"n\">adjustment</span>","parent_name":"PBSound"},"Classes/PBSound.html#/c:@M@Particleboard@objc(cs)PBSound(cpy)sharedInstance":{"name":"sharedInstance","abstract":"<p>Shared instance and only way to properly access the class.</p>","parent_name":"PBSound"},"Classes/PBSound.html#/c:@M@Particleboard@objc(cs)PBSound(im)playSoundOnNodeWithNode:fileName:":{"name":"playSoundOnNode(node:fileName:)","abstract":"<p>Utility function to play a sound</p>","parent_name":"PBSound"},"Classes/PBSound.html#/s:13Particleboard7PBSoundC19getSKActionForSoundSo0D0CSS8fileName_SfSg18distanceFromCamera12CoreGraphics7CGFloatVSg10cameraZoomSf14volumeModifiertF":{"name":"getSKActionForSound(fileName:distanceFromCamera:cameraZoom:volumeModifier:)","abstract":"<p>Main call to play a sound. Returns the SKAction, which you can later run on the node of your choice. Optionally pass in distance arguments","parent_name":"PBSound"},"Classes/PBSound.html#/s:13Particleboard7PBSoundC24getSKActionForSoundGroupSo0D0CSS3key_SfSg18distanceFromCamera12CoreGraphics7CGFloatVSg10cameraZoomtF":{"name":"getSKActionForSoundGroup(key:distanceFromCamera:cameraZoom:)","abstract":"<p>Instead of playing a specific file, this will look for any loaded sound groups and play a random file from that group. Example would be playing a random bow string, or random sword clank.</p>","parent_name":"PBSound"},"Classes/PBSound.html#/c:@M@Particleboard@objc(cs)PBSound(im)changeVolumeByIncrementWithIncrement:":{"name":"changeVolumeByIncrement(increment:)","abstract":"<p>Change volume to amount. Final volume must be between 1 and 10</p>","parent_name":"PBSound"},"Classes/PBSound.html#/c:@M@Particleboard@objc(cs)PBSound(im)audioPlayerDidFinishPlaying:successfully:":{"name":"audioPlayerDidFinishPlaying(_:successfully:)","abstract":"<p>Delegate to call when sound is finished so we can remove it from local storage array</p>","parent_name":"PBSound"},"Classes/PBMusic.html#/s:13Particleboard7PBMusicC6volumeSivp":{"name":"volume","abstract":"<p>AVPlayer expects a volume of 0 to 1. Making this an Int just abstracts it to something easier to read. If you set it to 6, 0.6 would be passed to AVPlayer.</p>","parent_name":"PBMusic"},"Classes/PBMusic.html#/s:13Particleboard7PBMusicC14sharedInstanceACvpZ":{"name":"sharedInstance","abstract":"<p>Shared instance and only way to properly access the class.</p>","parent_name":"PBMusic"},"Classes/PBMusic.html#/s:13Particleboard7PBMusicC4playySS8fileName_tF":{"name":"play(fileName:)","abstract":"<p>Start playing the music file on a loop.</p>","parent_name":"PBMusic"},"Classes/PBMusic.html#/s:13Particleboard7PBMusicC16prepareCrossFadeySS8fileName_tF":{"name":"prepareCrossFade(fileName:)","abstract":"<p>Sets up the second player with the new track to fade to. Call <code>transitionToCrossFade</code> to start playing.</p>","parent_name":"PBMusic"},"Classes/PBMusic.html#/s:13Particleboard7PBMusicC21transitionToCrossFadeyyF":{"name":"transitionToCrossFade()","abstract":"<p>Gradually switch between tracks</p>","parent_name":"PBMusic"},"Classes/PBMusic.html#/s:13Particleboard7PBMusicC5pauseyyF":{"name":"pause()","abstract":"<p>Pause the active player.</p>","parent_name":"PBMusic"},"Classes/PBMusic.html":{"name":"PBMusic","abstract":"<p>Static class to help playback of background tracks. Intended for longer music where PBSound is aimed at sound effects. The separation can allow for greater customization / performance down the road.</p>"},"Classes/PBSound.html":{"name":"PBSound","abstract":"<p>Static class to help playback of soudn effects. Provides utility like randomizing sounds, and allowing multiple sounds to play at once.</p>"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"},"Global Variables.html":{"name":"Global Variables","abstract":"<p>The following global variables are available globally.</p>"},"Enums.html":{"name":"Enumerations","abstract":"<p>The following enumerations are available globally.</p>"},"Extensions.html":{"name":"Extensions","abstract":"<p>The following extensions are available globally.</p>"},"Functions.html":{"name":"Functions","abstract":"<p>The following functions are available globally.</p>"}}