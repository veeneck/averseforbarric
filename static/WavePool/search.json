{"Structs/WPWave.html#/s:8WavePool6WPWaveV8waitTimeSdvp":{"name":"waitTime","abstract":"<p>Figure this out. Currently does nothing.</p>","parent_name":"WPWave"},"Structs/WPWave.html#/s:8WavePool6WPWaveV9delayTimeSdvp":{"name":"delayTime","abstract":"<p>How long to wait since the last wave to process.</p>","parent_name":"WPWave"},"Structs/WPSpawn.html#/s:8WavePool7WPSpawnV5enemySSvp":{"name":"enemy","abstract":"<p>The name of the enemy to spawn. Assume name is a unique string that represents the ID of the squad.</p>","parent_name":"WPSpawn"},"Structs/WPSpawn.html#/s:8WavePool7WPSpawnV6amountSivp":{"name":"amount","abstract":"<p>How many units to add to the squad.</p>","parent_name":"WPSpawn"},"Structs/WPSpawn.html#/s:8WavePool7WPSpawnV7spacingSivp":{"name":"spacing","abstract":"<p>How far apart each unit should be space.</p>","parent_name":"WPSpawn"},"Structs/WPSpawn.html#/s:8WavePool7WPSpawnV7columnsSivp":{"name":"columns","abstract":"<p>How many columns make up the formation.</p>","parent_name":"WPSpawn"},"Structs/WPSpawn.html#/s:8WavePool7WPSpawnV8waitTimeSdvp":{"name":"waitTime","abstract":"<p>From when the wave starts, how long shoud this spawn should wait to process.</p>","parent_name":"WPSpawn"},"Structs/WPSpawn.html":{"name":"WPSpawn","abstract":"<p>Container to hold information about the spawn. A spawn represents one object in a wave. A wave may contain many spawns. Specific to my game, a spawn is a Squad. The pList data will match up to the variable sin this struct.</p>"},"Structs/WPWave.html":{"name":"WPWave","abstract":"<p>Container representing one wave in the pool. A wave can contain many spawns. There can be a delay between waves.</p>"},"Protocols/WPLifeguardProtocol.html#/s:8WavePool19WPLifeguardProtocolP16waveTimerStartedyAA6WPWaveVF":{"name":"waveTimerStarted(_:)","abstract":"<p>Right when a wave is queued up. Allows to show thing slike a timer</p>","parent_name":"WPLifeguardProtocol"},"Protocols/WPLifeguardProtocol.html#/s:8WavePool19WPLifeguardProtocolP13waveWillStartyAA6WPWaveVF":{"name":"waveWillStart(_:)","abstract":"<p>Just before the wave starts. This is a chance to run logic and pause the WPPool.</p>","parent_name":"WPLifeguardProtocol"},"Protocols/WPLifeguardProtocol.html#/s:8WavePool19WPLifeguardProtocolP12waveDidStartyAA6WPWaveVF":{"name":"waveDidStart(_:)","abstract":"<p>Wave has already spawned. A chance to cancel the next wave early, or perform post logic.</p>","parent_name":"WPLifeguardProtocol"},"Protocols/WPLifeguardProtocol.html#/s:8WavePool19WPLifeguardProtocolP11handleSpawnyAA7WPSpawnVF":{"name":"handleSpawn(_:)","abstract":"<p>Callback to indicate the spawn should be added to the world.</p>","parent_name":"WPLifeguardProtocol"},"Protocols/WPLifeguardProtocol.html":{"name":"WPLifeguardProtocol","abstract":"<p>Protocol to handle key events of each wave.</p>"},"Classes/WPPool/SpawnPoint.html#/s:8WavePool6WPPoolC10SpawnPointV5pointSC7CGPointVvp":{"name":"point","abstract":"<p>Point on a map.</p>","parent_name":"SpawnPoint"},"Classes/WPPool/SpawnPoint.html#/s:8WavePool6WPPoolC10SpawnPointV7heading12CoreGraphics7CGFloatVvp":{"name":"heading","abstract":"<p>Direction to face when spawning at this point.</p>","parent_name":"SpawnPoint"},"Classes/WPPool/SpawnPoint.html":{"name":"SpawnPoint","abstract":"<p>A coordinate to indicate where a WPSpawn should take place. Loaded once, and then referenced as index.</p>","parent_name":"WPPool"},"Classes/WPPool.html#/s:8WavePool6WPPoolC11spawnPointsSayAC10SpawnPointVGvp":{"name":"spawnPoints","abstract":"<p>Index is used to determine where the spawn starts</p>","parent_name":"WPPool"},"Classes/WPPool.html#/s:8WavePool6WPPoolC07currentA0Sivp":{"name":"currentWave","abstract":"<p>Index in the wave array marking the current wave</p>","parent_name":"WPPool"},"Classes/WPPool.html#/s:8WavePool6WPPoolCACSS8fileName_SayAC10SpawnPointVG11spawnPointsAA19WPLifeguardProtocol_p8delegatetcfc":{"name":"init(fileName:spawnPoints:delegate:)","abstract":"<p>Construction for the WPPool.</p>","parent_name":"WPPool"},"Classes/WPPool.html#/s:8WavePool6WPPoolC10beginWavesyyF":{"name":"beginWaves()","abstract":"<p>Call this once when you are ready to start the pool.</p>","parent_name":"WPPool"},"Classes/WPPool.html#/s:8WavePool6WPPoolC5pauseyyF":{"name":"pause()","abstract":"<p>This will pause the timer. When resuming, the timer will pick up at the point it was stopped.</p>","parent_name":"WPPool"},"Classes/WPPool.html#/s:8WavePool6WPPoolC06isLastA0SbyF":{"name":"isLastWave()","abstract":"<p>Lookup to determine when the last wave is reached. This is useful because a delegate callback when the waves are finished isn&rsquo;t enough to determine an event like level completed. Instead, the user would wait until the last enemy dies and then check with the WPPool to make sure no more enemies are coming. This function will assist with that.</p>","parent_name":"WPPool"},"Classes/WPPool.html#/s:8WavePool6WPPoolC19updateWithDeltaTimeySdF":{"name":"updateWithDeltaTime(_:)","abstract":"<p>Must be called for WPPool to function. Preferably, call every frame within your game loop.</p>","parent_name":"WPPool"},"Classes/WPPool.html":{"name":"WPPool","abstract":"<p>Class to manage the timing of waves, and calling a WPLifeguardProtocol delegate during key events.</p>"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"},"Protocols.html":{"name":"Protocols","abstract":"<p>The following protocols are available globally.</p>"},"Structs.html":{"name":"Structures","abstract":"<p>The following structures are available globally.</p>"}}