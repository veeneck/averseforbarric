{"Classes/CKVideoNode.html#/c:@M@CutsceneKit@objc(cs)CKVideoNode(py)player":{"name":"player","abstract":"<p>Handle on the player so that we can add hooks after initialization.</p>","parent_name":"CKVideoNode"},"Classes/CKVideoNode.html#/c:@M@CutsceneKit@objc(cs)CKVideoNode(py)playerItem":{"name":"playerItem","abstract":"<p>Handle of the playerItem so that we can add notifications after initialization.</p>","parent_name":"CKVideoNode"},"Classes/CKVideoNode.html#/c:@M@CutsceneKit@objc(cs)CKVideoNode(im)initWithName:ext:":{"name":"init(name:ext:)","abstract":"<p>Create a CKVideoNode using an AVPlayer.</p>","parent_name":"CKVideoNode"},"Classes/CKVideoNode.html#/c:@M@CutsceneKit@objc(cs)CKVideoNode(im)addTimingHookWithTimestamp:block:":{"name":"addTimingHook(timestamp:block:)","abstract":"<p>Run a block of code at the provided timestamp.</p>","parent_name":"CKVideoNode"},"Classes/CKVideoNode.html#/c:@M@CutsceneKit@objc(cs)CKVideoNode(im)registerCompletionCallbackWithCallback:":{"name":"registerCompletionCallback(callback:)","abstract":"<p>Removes any notification center listeners on the node, and then adds a new listener for <code>AVPlayerItemDidPlayToEndTimeNotification</code>.</p>","parent_name":"CKVideoNode"},"Classes/CKVideoNode.html#/c:@M@CutsceneKit@objc(cs)CKVideoNode(im)skipToEnd":{"name":"skipToEnd()","abstract":"<p>Utility to function to jump the player to the end of the video. Preferred way to <q>skip</q> a video as it will route through appopriate cleanup functions.</p>","parent_name":"CKVideoNode"},"Classes/CKVideoNode.html#/c:@M@CutsceneKit@objc(cs)CKVideoNode(im)playerDidFinishPlayingWithNote:":{"name":"playerDidFinishPlaying(note:)","abstract":"<p>Private function to handle cleanup of player and process callback</p>","parent_name":"CKVideoNode"},"Classes/CKSequence.html#/s:11CutsceneKit10CKSequenceCACSayAA8CKActionCG7actions_tcfc":{"name":"init(actions:)","abstract":"<p>Initialize with CKAction objects. A CKSequence without actions will not do anything.</p>","parent_name":"CKSequence"},"Classes/CKSequence.html#/s:11CutsceneKit10CKSequenceC10addActionsySayAA8CKActionCG7actions_tF":{"name":"addActions(actions:)","abstract":"<p>Append actions onto the existing group.</p>","parent_name":"CKSequence"},"Classes/CKDialogueAction.html#/s:11CutsceneKit16CKDialogueActionCACSo6SKNodeC4node_Sd8durationSo11SKLabelNodeC5labeltcfc":{"name":"init(node:duration:label:)","abstract":"<p>Initialize by creating your own SKLabelNode. The label will be assigned a default action to add it to the provided <code>node</code> where it will remain for the set <code>duration</code>.</p>","parent_name":"CKDialogueAction"},"Classes/CKDialogueAction.html#/s:11CutsceneKit16CKDialogueActionCACSo6SKNodeC4node_SC7CGPointV8positionSd8durationSS4texttcfc":{"name":"init(node:position:duration:text:)","abstract":"<p>Convenience initializer that creates a SKLabelNode with default settings. The label will be assigned a default action to add it to the provided <code>node</code> where it will remain for the set <code>duration</code>.</p>","parent_name":"CKDialogueAction"},"Classes/CKCutscene.html#/s:11CutsceneKit10CKCutsceneCACycfc":{"name":"init()","abstract":"<p>Empty initializer to retain object for future use.</p>","parent_name":"CKCutscene"},"Classes/CKCutscene.html#/s:11CutsceneKit10CKCutsceneCACSayAA10CKSequenceCG9sequences_tcfc":{"name":"init(sequences:)","abstract":"<p>Initialize with sequences pre assigned.</p>","parent_name":"CKCutscene"},"Classes/CKCutscene.html#/s:11CutsceneKit10CKCutsceneC12addSequencesySayAA10CKSequenceCG9sequences_tF":{"name":"addSequences(sequences:)","abstract":"<p>Append a group of sequences onto the end of the current sequence queue.</p>","parent_name":"CKCutscene"},"Classes/CKCutscene.html#/s:11CutsceneKit10CKCutsceneC5beginyyyc10completion_tF":{"name":"begin(completion:)","abstract":"<p>Begin playing through each CKSequence until completion. Once a CKSequence has been completed,","parent_name":"CKCutscene"},"Classes/CKCutscene.html#/s:11CutsceneKit10CKCutsceneC19skipCurrentSequenceyyF":{"name":"skipCurrentSequence()","abstract":"<p>Force the current running CKSequence to skip, and automatically start playing the next CKSequence if applicable.</p>","parent_name":"CKCutscene"},"Classes/CKAction.html#/s:11CutsceneKit8CKActionCACSo6SKNodeC4node_So8SKActionC6actionS2fcSg13desiredTimingtcfc":{"name":"init(node:action:desiredTiming:)","abstract":"<p>Initilize an CKAction and override the timing function to allow skip functionality.</p>","parent_name":"CKAction"},"Classes/CKAction.html":{"name":"CKAction","abstract":"<p>A container for SKActions and the nodes they should run on. Also manages the timing function that allows SKActions to be skipped. To use a CKAction, it must be added to a CKSequence, which is then controlled by a CKCutscene.</p>"},"Classes/CKCutscene.html":{"name":"CKCutscene","abstract":"<p>Handles cleanup, management and playback of a collection of CKSequence objects that make up a cutscene.</p>"},"Classes/CKDialogueAction.html":{"name":"CKDialogueAction","abstract":"<p>The purpose of this class is to provide an example of how CKAction can be subclassed to enapsulate common cutscene features. For this specific use case, sequences of dialogue can be added.</p>"},"Classes/CKSequence.html":{"name":"CKSequence","abstract":"<p>A collection of CKAction objects that can be run together. Typically, you would run SKAction calls independtly from one another. For example, if you wanted to move two different nodes then you would do this:</p>"},"Classes/CKVideoNode.html":{"name":"CKVideoNode","abstract":"<p>A sublcass of SKVideoNode that adds useful extensions such as timed hooks, callback on completetion, and cleanup afterwards. Also makes it easier to create a video based off of an AVPlayer.</p>"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"}}